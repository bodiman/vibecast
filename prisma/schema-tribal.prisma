// This is your Prisma schema file
// Extended for TribalKnowledge support

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== Existing Models =====

model Model {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  version     String   @default("1.0.0")
  
  variables   Variable[]
  edges       Edge[]
  marketplace MarketplaceModel?
  versions    ModelVersion[]
  
  @@map("models")
}

model Variable {
  id       String  @id @default(cuid())
  name     String  
  type     String
  formula  String?
  values   Json?
  metadata Json?
  
  model    Model   @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId  String
  
  sourceEdges Edge[] @relation("SourceVariable")
  targetEdges Edge[] @relation("TargetVariable")
  
  position3D Json?
  
  @@unique([modelId, name])
  @@map("variables")
}

model Edge {
  id       String  @id @default(cuid())
  type     String  @default("dependency")
  metadata Json?
  
  model    Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId  String
  
  source   Variable @relation("SourceVariable", fields: [sourceId], references: [id], onDelete: Cascade)
  sourceId String
  
  target   Variable @relation("TargetVariable", fields: [targetId], references: [id], onDelete: Cascade)
  targetId String
  
  @@index([sourceId])
  @@index([targetId])
  @@index([modelId])
  @@map("edges")
}

model MarketplaceModel {
  id          String   @id @default(cuid())
  author      String
  tags        String[]
  category    String
  license     String
  stars       Int      @default(0)
  forks       Int      @default(0)
  downloads   Int      @default(0)
  published   Boolean  @default(false)
  publishedAt DateTime @default(now())
  
  model       Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId     String   @unique
  
  dependencies String[]
  
  @@index([category])
  @@index([author])
  @@index([stars])
  @@index([downloads])
  @@map("marketplace_models")
}

model ModelVersion {
  id        String   @id @default(cuid())
  version   String
  snapshot  Json
  changelog String?
  createdAt DateTime @default(now())
  
  model     Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId   String
  
  @@unique([modelId, version])
  @@map("model_versions")
}

model Session {
  id        String   @id @default(cuid())
  userId    String?
  modelId   String?
  data      Json?
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  
  @@index([modelId])
  @@index([userId])
  @@map("sessions")
}

model GraphLayout {
  id          String @id @default(cuid())
  modelId     String @unique
  layoutType  String @default("force-directed")
  nodePositions Json
  settings    Json?
  updatedAt   DateTime @updatedAt
  
  @@map("graph_layouts")
}

// ===== NEW: TribalKnowledge Models =====

// Main TribalKnowledge graph container
model TribalKnowledge {
  id          String   @id @default(cuid())
  codespace   String   // Codespace identifier
  domain      String   // Domain (e.g., 'frontend', 'api', 'database')
  description String?
  
  // Serialized graph data
  metadata    Json     // TribalKnowledgeMetadata
  nodes       Json     // KnowledgeNode[]
  links       Json     // KnowledgeLink[]
  
  // Quick access fields (denormalized for performance)
  version     String   @default("1.0.0")
  nodeCount   Int      @default(0)
  linkCount   Int      @default(0)
  avgImportance Float  @default(0)
  
  // Ownership and visibility
  owner       String?
  visibility  String   @default("private") // 'private' | 'team' | 'public'
  
  // Hub metadata
  published   Boolean  @default(false)
  publishedAt DateTime?
  stars       Int      @default(0)
  forks       Int      @default(0)
  downloads   Int      @default(0)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Activity tracking
  activities  KnowledgeActivity[]
  
  @@unique([codespace, domain])
  @@index([codespace])
  @@index([visibility])
  @@index([published])
  @@index([owner])
  @@map("tribal_knowledge")
}

// Activity log for knowledge evolution
model KnowledgeActivity {
  id          String   @id @default(cuid())
  
  knowledge   TribalKnowledge @relation(fields: [knowledgeId], references: [id], onDelete: Cascade)
  knowledgeId String
  
  // Activity details
  type        String   // 'node_added', 'node_updated', 'link_added', 'merged', 'forked', etc.
  actor       String?  // Who made the change
  description String?
  metadata    Json?
  
  createdAt   DateTime @default(now())
  
  @@index([knowledgeId])
  @@index([type])
  @@index([createdAt])
  @@map("knowledge_activities")
}

// Agent state - tracks which knowledge an agent is using
model AgentState {
  id          String   @id @default(cuid())
  
  // Agent identification
  agentId     String   @unique
  agentName   String?
  codespace   String
  
  // Current knowledge context
  currentKnowledge Json // { codespace: string, domain: string }[]
  
  // Learning history
  interactions Int     @default(0)
  lastActive   DateTime @default(now())
  
  // Performance metrics
  metrics      Json?   // Success rates, patterns used, etc.
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([codespace])
  @@index([lastActive])
  @@map("agent_states")
}

// Shared context cache for quick access
model ContextCache {
  id          String   @id @default(cuid())
  
  // Cache key
  codespace   String
  domain      String
  contextType String   // 'full', 'summary', 'top-nodes', etc.
  
  // Cached content
  content     String   @db.Text
  tokens      Int?     // Approximate token count
  
  // Cache metadata
  version     String   // Knowledge version when cached
  createdAt   DateTime @default(now())
  expiresAt   DateTime // When to invalidate
  
  @@unique([codespace, domain, contextType])
  @@index([expiresAt])
  @@map("context_cache")
}
