{"version":3,"file":"index-MbMdZnPr.js","sources":["../../src/components/GraphViewer3D.tsx","../../src/api/client.ts","../../src/pages/GraphExplorer.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["import React, { useRef, useMemo, useCallback, useState, useEffect } from 'react';\nimport { Canvas, useFrame, useThree } from '@react-three/fiber';\nimport { OrbitControls, Text, Html, Stats } from '@react-three/drei';\nimport * as THREE from 'three';\nimport type { GraphNode, GraphEdge, GraphData } from '../types/api';\n\ninterface GraphViewer3DProps {\n  data: GraphData;\n  onNodeClick?: (node: GraphNode) => void;\n  onEdgeClick?: (edge: GraphEdge) => void;\n  onLayoutChange?: (positions: Record<string, { x: number; y: number; z: number }>) => void;\n  layoutAlgorithm?: 'force' | 'circular' | 'hierarchical';\n  width?: number;\n  height?: number;\n}\n\n// Node component\nfunction Node({ \n  node, \n  position, \n  onClick, \n  isSelected, \n  onPositionChange \n}: { \n  node: GraphNode; \n  position: [number, number, number];\n  onClick: () => void;\n  isSelected: boolean;\n  onPositionChange: (position: [number, number, number]) => void;\n}) {\n  const meshRef = useRef<THREE.Mesh>(null);\n  const [hovered, setHovered] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  \n  const { camera, raycaster, mouse } = useThree();\n  \n  // Color based on node type\n  const color = useMemo(() => {\n    switch (node.type) {\n      case 'scalar': return '#4f46e5'; // Purple\n      case 'series': return '#059669'; // Green\n      case 'parameter': return '#dc2626'; // Red\n      default: return '#6b7280'; // Gray\n    }\n  }, [node.type]);\n  \n  // Size based on importance or connections\n  const size = useMemo(() => {\n    const baseSize = 0.8;\n    const valueMultiplier = node.values?.length ? Math.log(node.values.length + 1) * 0.2 : 0;\n    return baseSize + valueMultiplier;\n  }, [node.values]);\n\n  useFrame(() => {\n    if (meshRef.current && isDragging) {\n      // Update position during drag\n      const currentPosition = meshRef.current.position;\n      onPositionChange([currentPosition.x, currentPosition.y, currentPosition.z]);\n    }\n  });\n\n  const handlePointerDown = useCallback((event: any) => {\n    event.stopPropagation();\n    setIsDragging(true);\n    onClick();\n  }, [onClick]);\n\n  const handlePointerUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  const handlePointerMove = useCallback((event: any) => {\n    if (isDragging && meshRef.current) {\n      // Simple drag implementation - in real app you'd want proper 3D dragging\n      const mesh = meshRef.current;\n      raycaster.setFromCamera(mouse, camera);\n      const plane = new THREE.Plane(new THREE.Vector3(0, 0, 1), 0);\n      const intersectionPoint = new THREE.Vector3();\n      raycaster.ray.intersectPlane(plane, intersectionPoint);\n      \n      mesh.position.copy(intersectionPoint);\n    }\n  }, [isDragging, camera, raycaster, mouse]);\n\n  return (\n    <group position={position}>\n      <mesh\n        ref={meshRef}\n        onClick={onClick}\n        onPointerDown={handlePointerDown}\n        onPointerUp={handlePointerUp}\n        onPointerMove={handlePointerMove}\n        onPointerEnter={() => setHovered(true)}\n        onPointerLeave={() => setHovered(false)}\n        scale={hovered || isSelected ? [1.2, 1.2, 1.2] : [1, 1, 1]}\n      >\n        <sphereGeometry args={[size, 32, 32]} />\n        <meshStandardMaterial \n          color={color} \n          transparent \n          opacity={hovered || isSelected ? 0.9 : 0.7}\n          emissive={isSelected ? color : '#000000'}\n          emissiveIntensity={isSelected ? 0.2 : 0}\n        />\n      </mesh>\n      \n      {/* Node label */}\n      <Text\n        position={[0, size + 0.5, 0]}\n        fontSize={0.3}\n        color=\"white\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n        maxWidth={2}\n      >\n        {node.name}\n      </Text>\n      \n      {/* Hover info */}\n      {hovered && (\n        <Html distanceFactor={10}>\n          <div className=\"bg-black bg-opacity-80 text-white p-2 rounded max-w-xs\">\n            <div className=\"font-bold\">{node.name}</div>\n            <div className=\"text-sm\">Type: {node.type}</div>\n            {node.values && (\n              <div className=\"text-sm\">Values: {node.values.length} points</div>\n            )}\n            {node.metadata?.description && (\n              <div className=\"text-sm mt-1\">{node.metadata.description}</div>\n            )}\n          </div>\n        </Html>\n      )}\n    </group>\n  );\n}\n\n// Edge component\nfunction Edge({ \n  edge, \n  sourcePosition, \n  targetPosition, \n  onClick \n}: { \n  edge: GraphEdge;\n  sourcePosition: [number, number, number];\n  targetPosition: [number, number, number];\n  onClick: () => void;\n}) {\n  const lineRef = useRef<THREE.BufferGeometry>(null);\n  const [hovered, setHovered] = useState(false);\n  \n  // Create line geometry\n  const points = useMemo(() => [\n    new THREE.Vector3(...sourcePosition),\n    new THREE.Vector3(...targetPosition)\n  ], [sourcePosition, targetPosition]);\n  \n  // Color based on edge type\n  const color = useMemo(() => {\n    switch (edge.type) {\n      case 'formula': return '#f59e0b'; // Amber\n      case 'temporal': return '#8b5cf6'; // Purple\n      case 'causal': return '#ef4444'; // Red\n      case 'derived': return '#10b981'; // Emerald\n      default: return '#6b7280'; // Gray\n    }\n  }, [edge.type]);\n\n  return (\n    <group>\n      <line\n        onClick={onClick}\n        onPointerEnter={() => setHovered(true)}\n        onPointerLeave={() => setHovered(false)}\n      >\n        <bufferGeometry ref={lineRef}>\n          <bufferAttribute\n            attach=\"attributes-position\"\n            count={points.length}\n            array={new Float32Array(points.flatMap(p => [p.x, p.y, p.z]))}\n            itemSize={3}\n            args={[new Float32Array(points.flatMap(p => [p.x, p.y, p.z])), 3]}\n          />\n        </bufferGeometry>\n        <lineBasicMaterial \n          color={color} \n          linewidth={hovered ? 3 : 1}\n          transparent\n          opacity={hovered ? 1 : 0.6}\n        />\n      </line>\n      \n      {/* Arrow head */}\n      <mesh position={targetPosition}>\n        <coneGeometry args={[0.1, 0.3, 8]} />\n        <meshBasicMaterial color={color} />\n      </mesh>\n    </group>\n  );\n}\n\n// Main 3D Scene component\nfunction Scene({ \n  data, \n  onNodeClick, \n  onEdgeClick, \n  onLayoutChange,\n  layoutAlgorithm = 'force'\n}: {\n  data: GraphData;\n  onNodeClick?: (node: GraphNode) => void;\n  onEdgeClick?: (edge: GraphEdge) => void;\n  onLayoutChange?: (positions: Record<string, { x: number; y: number; z: number }>) => void;\n  layoutAlgorithm?: 'force' | 'circular' | 'hierarchical';\n}) {\n  const [selectedNode, setSelectedNode] = useState<string | null>(null);\n  const [nodePositions, setNodePositions] = useState<Record<string, [number, number, number]>>({});\n  const [layoutEnabled, setLayoutEnabled] = useState(true);\n  const frameCountRef = useRef(0);\n  \n  // Initialize node positions based on layout algorithm\n  useEffect(() => {\n    const positions: Record<string, [number, number, number]> = {};\n    \n    data.nodes.forEach((node, index) => {\n      if (node.position3D && layoutAlgorithm === 'force') {\n        // Use saved positions for force-directed layout\n        positions[node.id] = [node.position3D.x, node.position3D.y, node.position3D.z];\n      } else {\n        // Calculate position based on layout algorithm\n        switch (layoutAlgorithm) {\n          case 'circular':\n            const angle = (index / data.nodes.length) * Math.PI * 2;\n            const radius = Math.max(data.nodes.length * 0.5, 5);\n            positions[node.id] = [\n              Math.cos(angle) * radius,\n              Math.sin(angle) * radius,\n              0\n            ];\n            break;\n            \n          case 'hierarchical':\n            // Simple hierarchical layout based on connections\n            const inDegree = data.edges.filter(e => e.target === node.id).length;\n            const level = Math.min(inDegree, 5); // Max 5 levels\n            const nodesAtLevel = data.nodes.filter((_, i) => {\n              const nodeInDegree = data.edges.filter(e => e.target === data.nodes[i].id).length;\n              return Math.min(nodeInDegree, 5) === level;\n            }).length;\n            const positionInLevel = data.nodes.filter((_, i) => {\n              const nodeInDegree = data.edges.filter(e => e.target === data.nodes[i].id).length;\n              return Math.min(nodeInDegree, 5) === level && i <= index;\n            }).length;\n            \n            positions[node.id] = [\n              (positionInLevel - nodesAtLevel / 2) * 3,\n              level * 4 - 10,\n              (Math.random() - 0.5) * 2\n            ];\n            break;\n            \n          case 'force':\n          default:\n            // Random initial positions for force-directed\n            const radius2 = Math.sqrt(data.nodes.length) * 2;\n            positions[node.id] = [\n              (Math.random() - 0.5) * radius2,\n              (Math.random() - 0.5) * radius2,\n              (Math.random() - 0.5) * 4\n            ];\n            break;\n        }\n      }\n    });\n    \n    setNodePositions(positions);\n    setLayoutEnabled(layoutAlgorithm === 'force'); // Only enable animation for force-directed\n    frameCountRef.current = 0; // Reset frame counter\n  }, [data, layoutAlgorithm]);\n  \n  // Simple force-directed layout simulation with throttling\n  useFrame(() => {\n    if (data.nodes.length === 0 || !layoutEnabled) return;\n    \n    // Throttle layout updates - only run every 3rd frame for performance\n    frameCountRef.current++;\n    if (frameCountRef.current % 3 !== 0) return;\n    \n    const newPositions = { ...nodePositions };\n    const dt = 0.048; // Adjusted for 20fps (60/3)\n    const repulsion = 5;\n    const attraction = 0.1;\n    const damping = 0.95;\n    \n    // Apply forces\n    data.nodes.forEach(node => {\n      if (!newPositions[node.id]) return;\n      \n      let [x, y, z] = newPositions[node.id];\n      let fx = 0, fy = 0, fz = 0;\n      \n      // Repulsion from other nodes\n      data.nodes.forEach(other => {\n        if (node.id === other.id || !newPositions[other.id]) return;\n        \n        const [ox, oy, oz] = newPositions[other.id];\n        const dx = x - ox;\n        const dy = y - oy;\n        const dz = z - oz;\n        const distance = Math.sqrt(dx * dx + dy * dy + dz * dz);\n        \n        if (distance > 0) {\n          const force = repulsion / (distance * distance);\n          fx += (dx / distance) * force;\n          fy += (dy / distance) * force;\n          fz += (dz / distance) * force;\n        }\n      });\n      \n      // Attraction along edges\n      data.edges.forEach(edge => {\n        if (edge.source === node.id && newPositions[edge.target]) {\n          const [tx, ty, tz] = newPositions[edge.target];\n          const dx = tx - x;\n          const dy = ty - y;\n          const dz = tz - z;\n          const distance = Math.sqrt(dx * dx + dy * dy + dz * dz);\n          \n          if (distance > 0) {\n            fx += dx * attraction;\n            fy += dy * attraction;\n            fz += dz * attraction;\n          }\n        }\n      });\n      \n      // Update position\n      const newX = x + fx * dt * damping;\n      const newY = y + fy * dt * damping;\n      const newZ = z + fz * dt * damping;\n      \n      newPositions[node.id] = [newX, newY, newZ];\n    });\n    \n    // Check if layout has stabilized (small movement)\n    let totalMovement = 0;\n    data.nodes.forEach(node => {\n      if (nodePositions[node.id] && newPositions[node.id]) {\n        const oldPos = nodePositions[node.id];\n        const newPos = newPositions[node.id];\n        const movement = Math.sqrt(\n          Math.pow(newPos[0] - oldPos[0], 2) +\n          Math.pow(newPos[1] - oldPos[1], 2) +\n          Math.pow(newPos[2] - oldPos[2], 2)\n        );\n        totalMovement += movement;\n      }\n    });\n    \n    // Stop animation if movement is very small\n    if (totalMovement < 0.01 && frameCountRef.current > 300) {\n      setLayoutEnabled(false);\n    }\n    \n    setNodePositions(newPositions);\n  });\n  \n  const handleNodeClick = useCallback((node: GraphNode) => {\n    setSelectedNode(node.id);\n    onNodeClick?.(node);\n  }, [onNodeClick]);\n  \n  const handleEdgeClick = useCallback((edge: GraphEdge) => {\n    onEdgeClick?.(edge);\n  }, [onEdgeClick]);\n  \n  const handleNodePositionChange = useCallback((nodeId: string, position: [number, number, number]) => {\n    setNodePositions(prev => ({ ...prev, [nodeId]: position }));\n    \n    // Notify parent of layout changes\n    if (onLayoutChange) {\n      const positions: Record<string, { x: number; y: number; z: number }> = {};\n      Object.entries({ ...nodePositions, [nodeId]: position }).forEach(([id, pos]) => {\n        positions[id] = { x: pos[0], y: pos[1], z: pos[2] };\n      });\n      onLayoutChange(positions);\n    }\n  }, [nodePositions, onLayoutChange]);\n  \n  return (\n    <>\n      {/* Ambient lighting */}\n      <ambientLight intensity={0.6} />\n      <pointLight position={[10, 10, 10]} intensity={0.8} />\n      <pointLight position={[-10, -10, -10]} intensity={0.4} />\n      \n      {/* Render nodes */}\n      {data.nodes.map(node => {\n        const position = nodePositions[node.id] || [0, 0, 0];\n        return (\n          <Node\n            key={node.id}\n            node={node}\n            position={position}\n            onClick={() => handleNodeClick(node)}\n            isSelected={selectedNode === node.id}\n            onPositionChange={(pos) => handleNodePositionChange(node.id, pos)}\n          />\n        );\n      })}\n      \n      {/* Render edges */}\n      {data.edges.map(edge => {\n        const sourcePos = nodePositions[edge.source];\n        const targetPos = nodePositions[edge.target];\n        \n        if (!sourcePos || !targetPos) return null;\n        \n        return (\n          <Edge\n            key={edge.id}\n            edge={edge}\n            sourcePosition={sourcePos}\n            targetPosition={targetPos}\n            onClick={() => handleEdgeClick(edge)}\n          />\n        );\n      })}\n      \n      {/* Grid */}\n      <gridHelper args={[20, 20, '#333333', '#333333']} />\n    </>\n  );\n}\n\n// Main GraphViewer3D component\nexport default function GraphViewer3D({ \n  data, \n  onNodeClick, \n  onEdgeClick, \n  onLayoutChange,\n  layoutAlgorithm = 'force',\n  width = 800,\n  height = 600\n}: GraphViewer3DProps) {\n  console.log('GraphViewer3D render:', { nodeCount: data.nodes.length, edgeCount: data.edges.length });\n  \n  // Show loading state if no data\n  if (!data || data.nodes.length === 0) {\n    return (\n      <div style={{ width, height, position: 'relative' }} className=\"bg-gray-900 flex items-center justify-center\">\n        <div className=\"text-center text-white\">\n          <div className=\"animate-spin inline-block w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full mb-4\"></div>\n          <div className=\"text-lg font-semibold\">Loading Graph...</div>\n          <div className=\"text-sm text-gray-400 mt-2\">Preparing 3D visualization</div>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div style={{ width, height, position: 'relative' }}>\n      <Canvas\n        camera={{ \n          position: [10, 10, 10], \n          fov: 60,\n          near: 0.1,\n          far: 1000\n        }}\n        style={{ background: '#0f0f0f' }}\n        gl={{ antialias: true, alpha: false }}\n        dpr={window.devicePixelRatio}\n      >\n        <Scene \n          data={data}\n          onNodeClick={onNodeClick}\n          onEdgeClick={onEdgeClick}\n          onLayoutChange={onLayoutChange}\n          layoutAlgorithm={layoutAlgorithm}\n        />\n        <OrbitControls \n          enablePan={true}\n          enableZoom={true}\n          enableRotate={true}\n          minDistance={5}\n          maxDistance={100}\n        />\n        <Stats />\n      </Canvas>\n      \n      {/* Controls hint */}\n      <div className=\"absolute bottom-4 left-4 bg-gray-900 bg-opacity-90 backdrop-blur text-white p-3 rounded-lg border border-gray-700\">\n        <div className=\"text-xs space-y-1\">\n          <div className=\"text-gray-300\">🖱️ Drag to rotate • 🔍 Scroll to zoom</div>\n          <div className=\"text-gray-300\">📱 Right-click to pan • 👆 Click to select</div>\n        </div>\n      </div>\n    </div>\n  );\n}","import type { \n  ApiConfig, \n  GraphData, \n  ModelListResponse, \n  LayoutUpdateRequest,\n  ModelInfo \n} from '../types/api';\n\nclass ApiClient {\n  private baseUrl: string;\n  private timeout: number;\n  private maxRetries: number = 3;\n  private retryDelay: number = 1000;\n\n  constructor(config: ApiConfig) {\n    this.baseUrl = config.baseUrl.replace(/\\/$/, ''); // Remove trailing slash\n    this.timeout = config.timeout || 10000; // 10s default timeout\n  }\n\n  private async request<T>(\n    endpoint: string, \n    options: RequestInit = {},\n    retryCount: number = 0\n  ): Promise<T> {\n    const url = `${this.baseUrl}${endpoint}`;\n    \n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        signal: controller.signal,\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers,\n        },\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        const error = new Error(`HTTP ${response.status}: ${errorText}`);\n        \n        // Retry on certain status codes\n        if (retryCount < this.maxRetries && this.shouldRetry(response.status)) {\n          console.warn(`Request failed, retrying in ${this.retryDelay}ms... (${retryCount + 1}/${this.maxRetries})`);\n          await this.delay(this.retryDelay * (retryCount + 1));\n          return this.request<T>(endpoint, options, retryCount + 1);\n        }\n        \n        throw error;\n      }\n\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        return await response.json();\n      }\n\n      return await response.text() as unknown as T;\n    } catch (error) {\n      clearTimeout(timeoutId);\n      \n      if (error instanceof Error) {\n        if (error.name === 'AbortError') {\n          throw new Error(`Request timeout after ${this.timeout}ms`);\n        }\n        \n        // Retry on network errors\n        if (retryCount < this.maxRetries && this.isNetworkError(error)) {\n          console.warn(`Network error, retrying in ${this.retryDelay}ms... (${retryCount + 1}/${this.maxRetries})`);\n          await this.delay(this.retryDelay * (retryCount + 1));\n          return this.request<T>(endpoint, options, retryCount + 1);\n        }\n        \n        throw error;\n      }\n      \n      throw new Error('Unknown error occurred');\n    }\n  }\n\n  private shouldRetry(status: number): boolean {\n    return status >= 500 || status === 408 || status === 429;\n  }\n\n  private isNetworkError(error: Error): boolean {\n    return error.message.includes('fetch') || \n           error.message.includes('network') ||\n           error.message.includes('timeout');\n  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // Health check\n  async healthCheck(): Promise<{ status: string; timestamp: string }> {\n    return this.request('/health');\n  }\n\n  // Get list of available models\n  async getModels(): Promise<string[]> {\n    const response = await this.request<ModelListResponse>('/api/models');\n    return response.models;\n  }\n\n  // Get model information\n  async getModelInfo(modelName: string): Promise<ModelInfo> {\n    return this.request(`/api/models/${encodeURIComponent(modelName)}/info`);\n  }\n\n  // Get graph data for a specific model\n  async getGraphData(modelName: string): Promise<GraphData> {\n    return this.request(`/api/models/${encodeURIComponent(modelName)}/graph`);\n  }\n\n  // Save graph layout (node positions)\n  async saveLayout(modelName: string, layout: LayoutUpdateRequest): Promise<void> {\n    await this.request(`/api/models/${encodeURIComponent(modelName)}/layout`, {\n      method: 'POST',\n      body: JSON.stringify(layout),\n    });\n  }\n\n  // Test API connectivity\n  async testConnection(): Promise<boolean> {\n    try {\n      await this.healthCheck();\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n\n// Create API client instance\nconst getApiBaseUrl = (): string => {\n  // Check for environment variable first\n  const envUrl = import.meta.env.VITE_API_BASE_URL;\n  if (envUrl) return envUrl;\n\n  // In development, use local server\n  if (import.meta.env.DEV) {\n    return 'http://localhost:3000';\n  }\n\n  // In production, use the deployed MCP server\n  return 'https://vibecast.fly.dev';\n};\n\nexport const apiClient = new ApiClient({\n  baseUrl: getApiBaseUrl(),\n  timeout: 15000, // 15s timeout for 3D data loading\n});\n\nexport default apiClient;","import React, { useState, useEffect, useCallback } from 'react';\nimport GraphViewer3D from '../components/GraphViewer3D';\nimport { apiClient } from '../api/client';\nimport type { GraphData, GraphNode, GraphEdge } from '../types/api';\n\nexport default function GraphExplorer() {\n  const [graphData, setGraphData] = useState<GraphData>({ nodes: [], edges: [] });\n  const [models, setModels] = useState<string[]>([]);\n  const [selectedModel, setSelectedModel] = useState<string>('');\n  const [selectedNode, setSelectedNode] = useState<GraphNode | null>(null);\n  const [selectedEdge, setSelectedEdge] = useState<GraphEdge | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [modelsLoading, setModelsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [connectionStatus, setConnectionStatus] = useState<'connected' | 'disconnected' | 'testing'>('testing');\n  const [layoutAlgorithm, setLayoutAlgorithm] = useState<'force' | 'circular' | 'hierarchical'>('force');\n  const [showStatistics, setShowStatistics] = useState(false);\n  const [showHelp, setShowHelp] = useState(false);\n\n  // Test connection and fetch available models\n  useEffect(() => {\n    const initializeApp = async () => {\n      setModelsLoading(true);\n      setConnectionStatus('testing');\n      \n      try {\n        // Test connection first\n        const isConnected = await apiClient.testConnection();\n        if (!isConnected) {\n          setConnectionStatus('disconnected');\n          setError('Cannot connect to server. Using sample data.');\n          setModelsLoading(false);\n          return;\n        }\n        \n        setConnectionStatus('connected');\n        \n        // Fetch models\n        const models = await apiClient.getModels();\n        setModels(models);\n        if (models.length > 0) {\n          setSelectedModel(models[0]);\n        }\n        setError(null);\n      } catch (err) {\n        console.error('Failed to initialize app:', err);\n        setConnectionStatus('disconnected');\n        setError(`Connection failed: ${err instanceof Error ? err.message : String(err)}`);\n      } finally {\n        setModelsLoading(false);\n      }\n    };\n\n    initializeApp();\n  }, []);\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const handleKeyPress = (event: KeyboardEvent) => {\n      if (event.ctrlKey || event.metaKey) {\n        switch (event.key) {\n          case '1':\n            event.preventDefault();\n            setLayoutAlgorithm('force');\n            break;\n          case '2':\n            event.preventDefault();\n            setLayoutAlgorithm('circular');\n            break;\n          case '3':\n            event.preventDefault();\n            setLayoutAlgorithm('hierarchical');\n            break;\n          case '?':\n            event.preventDefault();\n            setShowHelp(!showHelp);\n            break;\n        }\n      } else if (event.key === 'Escape') {\n        setSelectedNode(null);\n        setSelectedEdge(null);\n        setShowHelp(false);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [showHelp]);\n\n  // Fetch graph data for selected model\n  useEffect(() => {\n    if (!selectedModel) return;\n\n    const fetchGraphData = async () => {\n      setLoading(true);\n      setError(null);\n      \n      try {\n        const data = await apiClient.getGraphData(selectedModel);\n        setGraphData(data);\n      } catch (err) {\n        console.error('Failed to fetch graph data:', err);\n        setError(`Failed to fetch graph data: ${err instanceof Error ? err.message : String(err)}`);\n        setGraphData({ nodes: [], edges: [] });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchGraphData();\n  }, [selectedModel]);\n\n  // Handle node selection\n  const handleNodeClick = useCallback((node: GraphNode) => {\n    setSelectedNode(node);\n    setSelectedEdge(null);\n  }, []);\n\n  // Handle edge selection\n  const handleEdgeClick = useCallback((edge: GraphEdge) => {\n    setSelectedEdge(edge);\n    setSelectedNode(null);\n  }, []);\n\n  // Handle layout changes\n  const handleLayoutChange = useCallback(async (positions: Record<string, { x: number; y: number; z: number }>) => {\n    if (!selectedModel) return;\n\n    try {\n      await apiClient.saveLayout(selectedModel, { nodePositions: positions });\n    } catch (err) {\n      console.error('Failed to save layout:', err);\n    }\n  }, [selectedModel]);\n\n  // Create sample data if no API is available\n  const sampleData: GraphData = {\n    nodes: [\n      { id: 'revenue', name: 'Revenue', type: 'series', values: [100, 110, 120, 130] },\n      { id: 'costs', name: 'Costs', type: 'series', values: [80, 85, 90, 95] },\n      { id: 'profit', name: 'Profit', type: 'scalar', values: [20, 25, 30, 35] },\n      { id: 'margin', name: 'Margin', type: 'parameter', values: [0.2] },\n      { id: 'growth', name: 'Growth Rate', type: 'parameter', values: [0.1] },\n    ],\n    edges: [\n      { id: 'rev-profit', source: 'revenue', target: 'profit', type: 'formula', formula: 'revenue - costs' },\n      { id: 'costs-profit', source: 'costs', target: 'profit', type: 'formula', formula: 'revenue - costs' },\n      { id: 'margin-profit', source: 'margin', target: 'profit', type: 'derived' },\n      { id: 'growth-revenue', source: 'growth', target: 'revenue', type: 'temporal' },\n    ]\n  };\n\n  // Always use sample data if no real data loaded or if disconnected\n  const displayData = (graphData.nodes.length > 0 && connectionStatus === 'connected') ? graphData : sampleData;\n  \n  console.log('GraphExplorer render:', { \n    connectionStatus, \n    graphDataNodes: graphData.nodes.length, \n    displayDataNodes: displayData.nodes.length,\n    selectedModel \n  });\n\n  return (\n    <div className=\"h-screen flex bg-gray-900\">\n      {/* Sidebar */}\n      <div className=\"w-80 bg-gray-800 text-white flex flex-col border-r border-gray-700\">\n        <div className=\"p-4 border-b border-gray-700\">\n          <h1 className=\"text-xl font-bold text-blue-400\">Context Marketplace</h1>\n          <h2 className=\"text-sm text-gray-300 mt-1\">3D Graph Explorer</h2>\n        </div>\n        \n        <div className=\"flex-1 overflow-y-auto p-4 space-y-6\">\n        \n        {/* Connection Status */}\n        <div className=\"bg-gray-700 rounded-lg p-3\">\n          <div className=\"flex items-center gap-2\">\n            <div className={`w-3 h-3 rounded-full ${\n              connectionStatus === 'connected' ? 'bg-green-500' : \n              connectionStatus === 'disconnected' ? 'bg-red-500' : \n              'bg-yellow-500 animate-pulse'\n            }`}></div>\n            <span className=\"text-sm font-medium\">\n              {connectionStatus === 'connected' ? 'Connected to server' :\n               connectionStatus === 'disconnected' ? 'Using sample data' :\n               'Connecting...'}\n            </span>\n          </div>\n        </div>\n\n        {/* Model selector */}\n        <div className=\"bg-gray-700 rounded-lg p-4\">\n          <label className=\"block text-sm font-semibold mb-3 text-gray-200\">Select Model</label>\n          <select\n            value={selectedModel}\n            onChange={(e) => setSelectedModel(e.target.value)}\n            className=\"w-full p-3 bg-gray-600 border border-gray-500 rounded-lg text-white disabled:opacity-50 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            disabled={modelsLoading || connectionStatus === 'testing'}\n          >\n            <option value=\"\">{modelsLoading ? 'Loading models...' : 'Choose a model...'}</option>\n            {models.map(model => (\n              <option key={model} value={model}>{model}</option>\n            ))}\n          </select>\n          {modelsLoading && (\n            <div className=\"mt-3 text-sm text-gray-300 flex items-center\">\n              <div className=\"animate-spin inline-block w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full mr-2\"></div>\n              Loading models...\n            </div>\n          )}\n        </div>\n\n        {/* Error display */}\n        {error && (\n          <div className=\"bg-red-900 border border-red-700 rounded-lg p-3\">\n            <div className=\"text-red-200 text-sm\">{error}</div>\n          </div>\n        )}\n\n        {/* Loading indicator */}\n        {loading && (\n          <div className=\"bg-blue-900 border border-blue-700 rounded-lg p-3\">\n            <div className=\"text-blue-200 text-sm flex items-center\">\n              <div className=\"animate-spin inline-block w-4 h-4 border-2 border-blue-400 border-t-transparent rounded-full mr-2\"></div>\n              Loading graph data...\n            </div>\n          </div>\n        )}\n\n        {/* Quick Actions */}\n        <div className=\"bg-gray-700 rounded-lg p-4\">\n          <h3 className=\"text-sm font-semibold mb-3 text-gray-200\">Quick Actions</h3>\n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => setSelectedNode(null)}\n              className=\"flex-1 px-3 py-2 bg-gray-600 hover:bg-gray-500 rounded-lg text-sm font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n              disabled={!selectedNode}\n            >\n              Clear Selection\n            </button>\n            <button\n              onClick={() => setShowHelp(true)}\n              className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-sm font-medium transition-colors\"\n            >\n              Help\n            </button>\n          </div>\n        </div>\n\n        {/* Layout Controls */}\n        <div className=\"bg-gray-700 rounded-lg p-4\">\n          <h3 className=\"text-sm font-semibold mb-3 text-gray-200\">Layout Algorithm</h3>\n          <select\n            value={layoutAlgorithm}\n            onChange={(e) => setLayoutAlgorithm(e.target.value as 'force' | 'circular' | 'hierarchical')}\n            className=\"w-full p-3 bg-gray-600 border border-gray-500 rounded-lg text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"force\">Force-Directed</option>\n            <option value=\"circular\">Circular</option>\n            <option value=\"hierarchical\">Hierarchical</option>\n          </select>\n          <div className=\"mt-2 text-xs text-gray-400 bg-gray-800 rounded px-2 py-1\">\n            Keyboard: Ctrl+1/2/3\n          </div>\n        </div>\n\n        {/* Graph statistics */}\n        <div className=\"bg-gray-700 rounded-lg p-4\">\n          <div className=\"flex justify-between items-center mb-3\">\n            <h3 className=\"text-sm font-semibold text-gray-200\">Graph Statistics</h3>\n            <button\n              onClick={() => setShowStatistics(!showStatistics)}\n              className=\"text-xs px-2 py-1 bg-gray-600 rounded hover:bg-gray-500 transition-colors\"\n            >\n              {showStatistics ? 'Hide' : 'Show'} Details\n            </button>\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div className=\"bg-gray-800 rounded p-2\">\n                <div className=\"text-gray-400 text-xs\">Nodes</div>\n                <div className=\"text-white font-medium\">{displayData.nodes.length}</div>\n              </div>\n              <div className=\"bg-gray-800 rounded p-2\">\n                <div className=\"text-gray-400 text-xs\">Edges</div>\n                <div className=\"text-white font-medium\">{displayData.edges.length}</div>\n              </div>\n            </div>\n            \n            {showStatistics && (\n              <div className=\"mt-4 pt-3 border-t border-gray-600 space-y-3\">\n                <div className=\"grid grid-cols-2 gap-4 text-xs\">\n                  <div className=\"bg-gray-800 rounded p-2\">\n                    <div className=\"text-gray-400\">Avg. Connections</div>\n                    <div className=\"text-white\">{displayData.nodes.length > 0 ? (displayData.edges.length * 2 / displayData.nodes.length).toFixed(1) : 0}</div>\n                  </div>\n                  <div className=\"bg-gray-800 rounded p-2\">\n                    <div className=\"text-gray-400\">Density</div>\n                    <div className=\"text-white\">{displayData.nodes.length > 1 ? ((displayData.edges.length / (displayData.nodes.length * (displayData.nodes.length - 1) / 2)) * 100).toFixed(1) : 0}%</div>\n                  </div>\n                </div>\n                \n                <div className=\"bg-gray-800 rounded p-3\">\n                  <div className=\"text-xs text-gray-400 mb-2\">Node Types</div>\n                  <div className=\"space-y-1\">\n                    {Object.entries(\n                      displayData.nodes.reduce((acc, node) => {\n                        acc[node.type] = (acc[node.type] || 0) + 1;\n                        return acc;\n                      }, {} as Record<string, number>)\n                    ).map(([type, count]) => (\n                      <div key={type} className=\"flex justify-between text-xs\">\n                        <span className=\"text-gray-300 capitalize\">{type}</span>\n                        <span className=\"text-white\">{count}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Selected node details */}\n        {selectedNode && (\n          <div className=\"bg-blue-900 border border-blue-700 rounded-lg p-4\">\n            <h3 className=\"text-sm font-semibold mb-3 text-blue-200\">Selected Node</h3>\n            <div className=\"space-y-2\">\n              <div className=\"font-medium text-white\">{selectedNode.name}</div>\n              <div className=\"text-sm text-blue-300 bg-blue-800 rounded px-2 py-1 inline-block\">\n                {selectedNode.type}\n              </div>\n              {selectedNode.values && (\n                <div className=\"text-sm text-blue-200\">\n                  <span className=\"text-blue-300\">Values:</span> [{selectedNode.values.slice(0, 3).join(', ')}\n                  {selectedNode.values.length > 3 ? '...' : ''}]\n                </div>\n              )}\n              {selectedNode.metadata?.description && (\n                <div className=\"text-sm text-blue-200 bg-blue-800 rounded p-2 mt-2\">\n                  {selectedNode.metadata.description}\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Selected edge details */}\n        {selectedEdge && (\n          <div className=\"bg-green-900 border border-green-700 rounded-lg p-4\">\n            <h3 className=\"text-sm font-semibold mb-3 text-green-200\">Selected Edge</h3>\n            <div className=\"space-y-2\">\n              <div className=\"font-medium text-white\">{selectedEdge.source} → {selectedEdge.target}</div>\n              <div className=\"text-sm text-green-300 bg-green-800 rounded px-2 py-1 inline-block\">\n                {selectedEdge.type}\n              </div>\n              {selectedEdge.formula && (\n                <div className=\"text-sm text-green-200\">\n                  <span className=\"text-green-300\">Formula:</span> {selectedEdge.formula}\n                </div>\n              )}\n              {selectedEdge.metadata?.description && (\n                <div className=\"text-sm text-green-200 bg-green-800 rounded p-2 mt-2\">\n                  {selectedEdge.metadata.description}\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Legend */}\n        <div className=\"bg-gray-700 rounded-lg p-4\">\n          <h3 className=\"text-sm font-semibold mb-3 text-gray-200\">Legend</h3>\n          \n          <div className=\"space-y-3\">\n            <div>\n              <div className=\"text-xs text-gray-400 mb-2\">Node Types</div>\n              <div className=\"space-y-1 text-sm\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-3 h-3 bg-purple-500 rounded-full mr-2\"></div>\n                  <span className=\"text-gray-300\">Scalar</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full mr-2\"></div>\n                  <span className=\"text-gray-300\">Series</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-3 h-3 bg-red-500 rounded-full mr-2\"></div>\n                  <span className=\"text-gray-300\">Parameter</span>\n                </div>\n              </div>\n            </div>\n            \n            <div>\n              <div className=\"text-xs text-gray-400 mb-2\">Edge Types</div>\n              <div className=\"space-y-1 text-sm\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-4 h-1 bg-yellow-500 mr-2 rounded\"></div>\n                  <span className=\"text-gray-300\">Formula</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-4 h-1 bg-purple-500 mr-2 rounded\"></div>\n                  <span className=\"text-gray-300\">Temporal</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-4 h-1 bg-red-500 mr-2 rounded\"></div>\n                  <span className=\"text-gray-300\">Causal</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-4 h-1 bg-green-500 mr-2 rounded\"></div>\n                  <span className=\"text-gray-300\">Derived</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        </div> {/* End scrollable content */}\n      </div> {/* End sidebar */}\n\n      {/* Main content - 3D Viewer */}\n      <div className=\"flex-1 relative bg-black\">\n        <GraphViewer3D\n          data={displayData}\n          onNodeClick={handleNodeClick}\n          onEdgeClick={handleEdgeClick}\n          onLayoutChange={handleLayoutChange}\n          layoutAlgorithm={layoutAlgorithm}\n          width={window.innerWidth - 320}\n          height={window.innerHeight}\n        />\n        \n        {/* Floating info panel */}\n        <div className=\"absolute top-4 right-4 space-y-3\">\n          {selectedModel && (\n            <div className=\"bg-gray-900 bg-opacity-95 backdrop-blur text-white p-4 rounded-lg border border-gray-700 shadow-xl\">\n              <div className=\"font-semibold text-blue-400\">Current Model</div>\n              <div className=\"text-sm text-gray-200\">{selectedModel}</div>\n              <div className=\"text-xs text-gray-400 mt-2 bg-gray-800 rounded px-2 py-1\">\n                Layout: {layoutAlgorithm.charAt(0).toUpperCase() + layoutAlgorithm.slice(1)}\n              </div>\n            </div>\n          )}\n          \n          {/* Help button */}\n          <button\n            onClick={() => setShowHelp(!showHelp)}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white p-3 rounded-lg shadow-xl transition-colors border border-blue-500\"\n            title=\"Show keyboard shortcuts (Ctrl+?)\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          </button>\n        </div>\n\n        {/* Help overlay */}\n        {showHelp && (\n          <div className=\"absolute inset-0 bg-black bg-opacity-80 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n            <div className=\"bg-gray-900 text-white p-6 rounded-xl border border-gray-700 shadow-2xl max-w-lg w-full max-h-[80vh] overflow-y-auto\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h3 className=\"text-xl font-bold text-blue-400\">Help & Controls</h3>\n                <button\n                  onClick={() => setShowHelp(false)}\n                  className=\"text-gray-400 hover:text-white text-2xl transition-colors bg-gray-800 hover:bg-gray-700 rounded-lg w-8 h-8 flex items-center justify-center\"\n                >\n                  ×\n                </button>\n              </div>\n              \n              <div className=\"space-y-6\">\n                <div>\n                  <h4 className=\"font-semibold mb-3 text-gray-200\">Keyboard Shortcuts</h4>\n                  <div className=\"bg-gray-800 rounded-lg p-4\">\n                    <div className=\"grid grid-cols-1 gap-3 text-sm\">\n                      <div className=\"flex justify-between items-center\">\n                        <kbd className=\"px-2 py-1 bg-gray-700 rounded text-xs font-mono\">Ctrl+1</kbd>\n                        <span className=\"text-gray-300\">Force-directed layout</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <kbd className=\"px-2 py-1 bg-gray-700 rounded text-xs font-mono\">Ctrl+2</kbd>\n                        <span className=\"text-gray-300\">Circular layout</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <kbd className=\"px-2 py-1 bg-gray-700 rounded text-xs font-mono\">Ctrl+3</kbd>\n                        <span className=\"text-gray-300\">Hierarchical layout</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <kbd className=\"px-2 py-1 bg-gray-700 rounded text-xs font-mono\">Ctrl+?</kbd>\n                        <span className=\"text-gray-300\">Show/hide help</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <kbd className=\"px-2 py-1 bg-gray-700 rounded text-xs font-mono\">Escape</kbd>\n                        <span className=\"text-gray-300\">Clear selection</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold mb-3 text-gray-200\">Mouse Controls</h4>\n                  <div className=\"bg-gray-800 rounded-lg p-4\">\n                    <div className=\"space-y-2 text-sm text-gray-300\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-2 h-2 bg-blue-500 rounded-full mr-3\"></div>\n                        <span><strong>Left click:</strong> Select node/edge</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                        <span><strong>Left drag:</strong> Rotate 3D view</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <div className=\"w-2 h-2 bg-yellow-500 rounded-full mr-3\"></div>\n                        <span><strong>Right drag:</strong> Pan view</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <div className=\"w-2 h-2 bg-purple-500 rounded-full mr-3\"></div>\n                        <span><strong>Scroll wheel:</strong> Zoom in/out</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <div className=\"w-2 h-2 bg-red-500 rounded-full mr-3\"></div>\n                        <span><strong>Drag nodes:</strong> Move in 3D space</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"mt-6 pt-4 border-t border-gray-700\">\n                <button\n                  onClick={() => setShowHelp(false)}\n                  className=\"w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors\"\n                >\n                  Got it!\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport GraphExplorer from './pages/GraphExplorer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GraphExplorer />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\n\n// Error boundary component\nclass ErrorBoundary extends React.Component<\n  { children: React.ReactNode },\n  { hasError: boolean; error?: Error }\n> {\n  constructor(props: { children: React.ReactNode }) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('React Error Boundary caught an error:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div style={{\n          height: '100vh',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          background: '#0a0a0a',\n          color: '#fff',\n          padding: '2rem',\n          fontFamily: 'monospace'\n        }}>\n          <h1>Something went wrong</h1>\n          <details style={{ marginTop: '1rem', maxWidth: '80%' }}>\n            <summary>Error details</summary>\n            <pre style={{ \n              marginTop: '1rem', \n              padding: '1rem', \n              background: '#1a1a1a',\n              borderRadius: '4px',\n              overflow: 'auto',\n              fontSize: '0.8rem'\n            }}>\n              {this.state.error?.stack}\n            </pre>\n          </details>\n          <button\n            onClick={() => window.location.reload()}\n            style={{\n              marginTop: '1rem',\n              padding: '0.5rem 1rem',\n              background: '#007acc',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            }}\n          >\n            Reload Page\n          </button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root')!);\n\nroot.render(\n  <React.StrictMode>\n    <ErrorBoundary>\n      <App />\n    </ErrorBoundary>\n  </React.StrictMode>\n);"],"names":["Node","node","position","onClick","isSelected","onPositionChange","meshRef","useRef","hovered","setHovered","useState","isDragging","setIsDragging","camera","raycaster","mouse","useThree","color","useMemo","size","_a","useFrame","currentPosition","handlePointerDown","useCallback","event","handlePointerUp","handlePointerMove","mesh","plane","THREE.Plane","THREE.Vector3","intersectionPoint","jsxs","jsx","Text","Html","Edge","edge","sourcePosition","targetPosition","lineRef","points","p","Scene","data","onNodeClick","onEdgeClick","onLayoutChange","layoutAlgorithm","selectedNode","setSelectedNode","nodePositions","setNodePositions","layoutEnabled","setLayoutEnabled","frameCountRef","useEffect","positions","index","angle","radius","inDegree","e","level","nodesAtLevel","_","i","nodeInDegree","positionInLevel","radius2","newPositions","dt","repulsion","attraction","damping","x","y","z","fx","fy","fz","other","ox","oy","oz","dx","dy","dz","distance","force","tx","ty","tz","newX","newY","newZ","totalMovement","oldPos","newPos","movement","handleNodeClick","handleEdgeClick","handleNodePositionChange","nodeId","prev","id","pos","Fragment","sourcePos","targetPos","GraphViewer3D","width","height","Canvas","OrbitControls","Stats","ApiClient","config","__publicField","endpoint","options","retryCount","url","controller","timeoutId","response","errorText","error","contentType","status","ms","resolve","modelName","layout","getApiBaseUrl","apiClient","GraphExplorer","graphData","setGraphData","models","setModels","selectedModel","setSelectedModel","selectedEdge","setSelectedEdge","loading","setLoading","modelsLoading","setModelsLoading","setError","connectionStatus","setConnectionStatus","setLayoutAlgorithm","showStatistics","setShowStatistics","showHelp","setShowHelp","err","handleKeyPress","handleLayoutChange","sampleData","displayData","model","acc","type","count","_b","App","ErrorBoundary","React","props","errorInfo","root","ReactDOM"],"mappings":"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"}